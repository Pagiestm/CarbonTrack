// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}
        
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(100)
  name      String   @db.VarChar(50)
  role      String   @db.VarChar(50)
  googleId  String?  @db.VarChar(100)
  createdAt DateTime @default(now())
  Projects  Project[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  Materials Material[]
}

model Material {
  id             Int       @id @default(autoincrement())
  name           String    @db.VarChar(50)
  supplier       String    @db.VarChar(50)
  carbonFootprint Decimal  @db.Decimal(15, 2)
  unit           String    @db.VarChar(50)
  pricePerUnit   Decimal   @db.Decimal(15, 2)
  categoryId     Int
  category       Category  @relation(fields: [categoryId], references: [id])
  ProjectMaterial ProjectMaterial[]
}

model Project {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(100)
  description    String?          @db.Text
  totalFootprint Decimal          @db.Decimal(15, 2)
  createdAt      DateTime         @default(now())
  userId         Int
  user           User             @relation(fields: [userId], references: [id])
  ProjectMaterial ProjectMaterial[]
}

model ProjectMaterial {
  id         Int      @id @default(autoincrement())
  projectId  Int
  materialId Int
  quantity   Float    @db.DoublePrecision
  project    Project  @relation(fields: [projectId], references: [id])
  material   Material @relation(fields: [materialId], references: [id])
  @@unique([projectId, materialId])
}

model InvalidToken {
  id    Int    @id @default(autoincrement())
  token String @unique
  createdAt DateTime @default(now())
}